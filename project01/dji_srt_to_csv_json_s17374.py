# -*- coding: utf-8 -*-
"""DJI srt to csv json_s17374.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dSKmFhaUhZPUeB5lWjQJVRmRsj2BjZPG
"""

from google.colab import drive
drive.mount('/content/drive')

"""+ ### read the srt file"""

import pandas as pd
import re

file_name = '/content/drive/My Drive/4th Year/DSC4013/day02/DJI_20230124113730_0001_W_Waypoint1.SRT'

frame_integer_re = '^[0-9]+$'

with open(file_name) as f :
    lines = [line.rstrip('\n') for line in f]
    
    
for line in lines[:22] :
    print(line)

pattern_line_count = '^(1|[1-9]\d{0,3}|[1-2]\d{4}|290[0-1][0-9]|2902[0-2])$'
pattern_lng_lat_alt = r"\[(.*?)\]"

df = pd.DataFrame(columns=['Time Code', 'Frame Number', 'Latitude', 'Longitude', 'Altitude'])

"""+ ### create the dataframe with basic attributes"""

for index in range(len(lines)):
  line_str = lines[index]
  if re.search(pattern_line_count, line_str) != None:
    sequence_number = line_str
    start_end_time = lines[index+1]
    frame_count_str = lines[index+2]
    fc_sub = frame_count_str.split('>')[1]

    lng_lat_alt = lines[index+5]

    match = re.search(r'FrameCnt:\s*(\d+)', fc_sub)
    if match:
      fc = int(match.group(1))
      #print(fc)
    
    match = re.search(r'DiffTime:\s*(\d+)', fc_sub)
    if match:
      time_diff = int(match.group(1))
      #print(time_diff)

    

    #sub_parts = re.findall(pattern_lng_lat_alt, lng_lat_alt)
    sub_parts = lng_lat_alt.split('[')
    lat = sub_parts[1].split(":")[1].strip()[:-1]
    lng = sub_parts[2].split(":")[1].strip()[:-1]
    rel_alt = sub_parts[3].split(":")[1].strip()[:7]

    #lng = sub_parts.group(1)
    #print(lat)
    #print(lng)
    #print(rel_alt)


    #print(sequence_number)
    #print(start_end_time)
    #print(lng_lat_alt)
    #for subpart in sub_parts:
    #  print(subpart.group(1))

    entry = {
        'Time Code': start_end_time,
        'Frame Number': fc,
        'Latitude':lat,
        'Longitude':lng,
        'Altitude':rel_alt
    }

    df.loc[len(df)] = entry

df.head(10)

df.shape

"""+ ### calculate the distance and modify the dataframe"""

import math

df['Latitude'] = df['Latitude'].astype(float)
df['Longitude'] = df['Longitude'].astype(float)

def distance(lat1, lon1, lat2, lon2):
    R = 6371 # radius of Earth in km
    dLat = math.radians(lat2 - lat1)
    dLon = math.radians(lon2 - lon1)
    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.cos(math.radians(lat1)) * \
        math.cos(math.radians(lat2)) * math.sin(dLon / 2) * math.sin(dLon / 2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    d = R * c
    return d

df['Distance'] = df.apply(lambda x: distance(x['Latitude'], x['Longitude'], df.iloc[0]['Latitude'], df.iloc[0]['Longitude']), axis=1)

df.shape

df.head(10)

df.tail()

df.info()

"""+ ### build a function to calculate the speed"""

def speed(Time_Code, distance, start_time):
    const = 3600000

    end_time = Time_Code.split('-->')[1].strip()
    end_time = end_time.replace(':', '').replace(',', '')
    end_int = int(end_time)

    time_diff = end_int - start_time
    start_time = end_int

    print(f"end_time: {end_time}, distance: {distance}, time_diff:{time_diff}")

    speed = (distance * const) / time_diff

    print(f"speed: {speed}")

    return speed

"""+ ### iteratively read the rows and add speed column to the dataframe"""

start_time = None
for i, row in df.iterrows():
    if start_time is None:
        start_time = int(row['Time Code'].split('-->')[0].replace(':', '').replace(',', ''))
        df.loc[i, 'Speed'] = 0
    else:
        df.loc[i, 'Speed'] = speed(row['Time Code'], row['Distance'], start_time)

df.head()

df.tail()

"""+ ### export the dataframe as csv and json file"""

df.to_csv('DJI.csv', index=False)

df.to_json('DJI.json', orient='records')